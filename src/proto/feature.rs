// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `feature.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct FeaDef {
    // message fields
    pub name: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeaDef {
    fn default() -> &'a FeaDef {
        <FeaDef as ::protobuf::Message>::default_instance()
    }
}

impl FeaDef {
    pub fn new() -> FeaDef {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FeaDef {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeaDef {
        FeaDef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &FeaDef| { &m.name },
                |m: &mut FeaDef| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &FeaDef| { &m.value },
                |m: &mut FeaDef| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FeaDef>(
                "FeaDef",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FeaDef {
        static instance: ::protobuf::rt::LazyV2<FeaDef> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeaDef::new)
    }
}

impl ::protobuf::Clear for FeaDef {
    fn clear(&mut self) {
        self.name.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeaDef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeaDef {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MulFeaDef {
    // message fields
    pub features: ::protobuf::SingularPtrField<FeaDef>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MulFeaDef {
    fn default() -> &'a MulFeaDef {
        <MulFeaDef as ::protobuf::Message>::default_instance()
    }
}

impl MulFeaDef {
    pub fn new() -> MulFeaDef {
        ::std::default::Default::default()
    }

    // .galaxy.FeaDef features = 1;


    pub fn get_features(&self) -> &FeaDef {
        self.features.as_ref().unwrap_or_else(|| <FeaDef as ::protobuf::Message>::default_instance())
    }
    pub fn clear_features(&mut self) {
        self.features.clear();
    }

    pub fn has_features(&self) -> bool {
        self.features.is_some()
    }

    // Param is passed by value, moved
    pub fn set_features(&mut self, v: FeaDef) {
        self.features = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_features(&mut self) -> &mut FeaDef {
        if self.features.is_none() {
            self.features.set_default();
        }
        self.features.as_mut().unwrap()
    }

    // Take field
    pub fn take_features(&mut self) -> FeaDef {
        self.features.take().unwrap_or_else(|| FeaDef::new())
    }
}

impl ::protobuf::Message for MulFeaDef {
    fn is_initialized(&self) -> bool {
        for v in &self.features {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.features)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.features.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.features.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MulFeaDef {
        MulFeaDef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FeaDef>>(
                "features",
                |m: &MulFeaDef| { &m.features },
                |m: &mut MulFeaDef| { &mut m.features },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MulFeaDef>(
                "MulFeaDef",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MulFeaDef {
        static instance: ::protobuf::rt::LazyV2<MulFeaDef> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MulFeaDef::new)
    }
}

impl ::protobuf::Clear for MulFeaDef {
    fn clear(&mut self) {
        self.features.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MulFeaDef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MulFeaDef {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Score {
    // message fields
    pub dim: i32,
    pub val: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Score {
    fn default() -> &'a Score {
        <Score as ::protobuf::Message>::default_instance()
    }
}

impl Score {
    pub fn new() -> Score {
        ::std::default::Default::default()
    }

    // int32 dim = 1;


    pub fn get_dim(&self) -> i32 {
        self.dim
    }
    pub fn clear_dim(&mut self) {
        self.dim = 0;
    }

    // Param is passed by value, moved
    pub fn set_dim(&mut self, v: i32) {
        self.dim = v;
    }

    // float val = 2;


    pub fn get_val(&self) -> f32 {
        self.val
    }
    pub fn clear_val(&mut self) {
        self.val = 0.;
    }

    // Param is passed by value, moved
    pub fn set_val(&mut self, v: f32) {
        self.val = v;
    }
}

impl ::protobuf::Message for Score {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.dim = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.val = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.dim != 0 {
            my_size += ::protobuf::rt::value_size(1, self.dim, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.val != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.dim != 0 {
            os.write_int32(1, self.dim)?;
        }
        if self.val != 0. {
            os.write_float(2, self.val)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Score {
        Score::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "dim",
                |m: &Score| { &m.dim },
                |m: &mut Score| { &mut m.dim },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "val",
                |m: &Score| { &m.val },
                |m: &mut Score| { &mut m.val },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Score>(
                "Score",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Score {
        static instance: ::protobuf::rt::LazyV2<Score> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Score::new)
    }
}

impl ::protobuf::Clear for Score {
    fn clear(&mut self) {
        self.dim = 0;
        self.val = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Score {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Score {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MulScore {
    // message fields
    pub score: ::protobuf::SingularPtrField<Score>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MulScore {
    fn default() -> &'a MulScore {
        <MulScore as ::protobuf::Message>::default_instance()
    }
}

impl MulScore {
    pub fn new() -> MulScore {
        ::std::default::Default::default()
    }

    // .galaxy.Score score = 1;


    pub fn get_score(&self) -> &Score {
        self.score.as_ref().unwrap_or_else(|| <Score as ::protobuf::Message>::default_instance())
    }
    pub fn clear_score(&mut self) {
        self.score.clear();
    }

    pub fn has_score(&self) -> bool {
        self.score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: Score) {
        self.score = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_score(&mut self) -> &mut Score {
        if self.score.is_none() {
            self.score.set_default();
        }
        self.score.as_mut().unwrap()
    }

    // Take field
    pub fn take_score(&mut self) -> Score {
        self.score.take().unwrap_or_else(|| Score::new())
    }
}

impl ::protobuf::Message for MulScore {
    fn is_initialized(&self) -> bool {
        for v in &self.score {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.score)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.score.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.score.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MulScore {
        MulScore::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Score>>(
                "score",
                |m: &MulScore| { &m.score },
                |m: &mut MulScore| { &mut m.score },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MulScore>(
                "MulScore",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MulScore {
        static instance: ::protobuf::rt::LazyV2<MulScore> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MulScore::new)
    }
}

impl ::protobuf::Clear for MulScore {
    fn clear(&mut self) {
        self.score.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MulScore {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MulScore {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GalaxyRequest {
    // message fields
    pub sid: ::std::string::String,
    pub version: i32,
    pub feas: ::protobuf::SingularPtrField<MulFeaDef>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GalaxyRequest {
    fn default() -> &'a GalaxyRequest {
        <GalaxyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GalaxyRequest {
    pub fn new() -> GalaxyRequest {
        ::std::default::Default::default()
    }

    // string sid = 1;


    pub fn get_sid(&self) -> &str {
        &self.sid
    }
    pub fn clear_sid(&mut self) {
        self.sid.clear();
    }

    // Param is passed by value, moved
    pub fn set_sid(&mut self, v: ::std::string::String) {
        self.sid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sid(&mut self) -> &mut ::std::string::String {
        &mut self.sid
    }

    // Take field
    pub fn take_sid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sid, ::std::string::String::new())
    }

    // int32 version = 2;


    pub fn get_version(&self) -> i32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    // .galaxy.MulFeaDef feas = 3;


    pub fn get_feas(&self) -> &MulFeaDef {
        self.feas.as_ref().unwrap_or_else(|| <MulFeaDef as ::protobuf::Message>::default_instance())
    }
    pub fn clear_feas(&mut self) {
        self.feas.clear();
    }

    pub fn has_feas(&self) -> bool {
        self.feas.is_some()
    }

    // Param is passed by value, moved
    pub fn set_feas(&mut self, v: MulFeaDef) {
        self.feas = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feas(&mut self) -> &mut MulFeaDef {
        if self.feas.is_none() {
            self.feas.set_default();
        }
        self.feas.as_mut().unwrap()
    }

    // Take field
    pub fn take_feas(&mut self) -> MulFeaDef {
        self.feas.take().unwrap_or_else(|| MulFeaDef::new())
    }
}

impl ::protobuf::Message for GalaxyRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.feas {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.feas)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sid);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.feas.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sid.is_empty() {
            os.write_string(1, &self.sid)?;
        }
        if self.version != 0 {
            os.write_int32(2, self.version)?;
        }
        if let Some(ref v) = self.feas.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GalaxyRequest {
        GalaxyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sid",
                |m: &GalaxyRequest| { &m.sid },
                |m: &mut GalaxyRequest| { &mut m.sid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "version",
                |m: &GalaxyRequest| { &m.version },
                |m: &mut GalaxyRequest| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulFeaDef>>(
                "feas",
                |m: &GalaxyRequest| { &m.feas },
                |m: &mut GalaxyRequest| { &mut m.feas },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GalaxyRequest>(
                "GalaxyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GalaxyRequest {
        static instance: ::protobuf::rt::LazyV2<GalaxyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GalaxyRequest::new)
    }
}

impl ::protobuf::Clear for GalaxyRequest {
    fn clear(&mut self) {
        self.sid.clear();
        self.version = 0;
        self.feas.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GalaxyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GalaxyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GalaxyResponse {
    // message fields
    pub sid: ::std::string::String,
    pub scores: ::protobuf::SingularPtrField<MulScore>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GalaxyResponse {
    fn default() -> &'a GalaxyResponse {
        <GalaxyResponse as ::protobuf::Message>::default_instance()
    }
}

impl GalaxyResponse {
    pub fn new() -> GalaxyResponse {
        ::std::default::Default::default()
    }

    // string sid = 1;


    pub fn get_sid(&self) -> &str {
        &self.sid
    }
    pub fn clear_sid(&mut self) {
        self.sid.clear();
    }

    // Param is passed by value, moved
    pub fn set_sid(&mut self, v: ::std::string::String) {
        self.sid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sid(&mut self) -> &mut ::std::string::String {
        &mut self.sid
    }

    // Take field
    pub fn take_sid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sid, ::std::string::String::new())
    }

    // .galaxy.MulScore scores = 2;


    pub fn get_scores(&self) -> &MulScore {
        self.scores.as_ref().unwrap_or_else(|| <MulScore as ::protobuf::Message>::default_instance())
    }
    pub fn clear_scores(&mut self) {
        self.scores.clear();
    }

    pub fn has_scores(&self) -> bool {
        self.scores.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scores(&mut self, v: MulScore) {
        self.scores = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scores(&mut self) -> &mut MulScore {
        if self.scores.is_none() {
            self.scores.set_default();
        }
        self.scores.as_mut().unwrap()
    }

    // Take field
    pub fn take_scores(&mut self) -> MulScore {
        self.scores.take().unwrap_or_else(|| MulScore::new())
    }
}

impl ::protobuf::Message for GalaxyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.scores {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.scores)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sid);
        }
        if let Some(ref v) = self.scores.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sid.is_empty() {
            os.write_string(1, &self.sid)?;
        }
        if let Some(ref v) = self.scores.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GalaxyResponse {
        GalaxyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sid",
                |m: &GalaxyResponse| { &m.sid },
                |m: &mut GalaxyResponse| { &mut m.sid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulScore>>(
                "scores",
                |m: &GalaxyResponse| { &m.scores },
                |m: &mut GalaxyResponse| { &mut m.scores },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GalaxyResponse>(
                "GalaxyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GalaxyResponse {
        static instance: ::protobuf::rt::LazyV2<GalaxyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GalaxyResponse::new)
    }
}

impl ::protobuf::Clear for GalaxyResponse {
    fn clear(&mut self) {
        self.sid.clear();
        self.scores.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GalaxyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GalaxyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rfeature.proto\x12\x06galaxy\"2\n\x06FeaDef\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\"7\
    \n\tMulFeaDef\x12*\n\x08features\x18\x01\x20\x01(\x0b2\x0e.galaxy.FeaDef\
    R\x08features\"+\n\x05Score\x12\x10\n\x03dim\x18\x01\x20\x01(\x05R\x03di\
    m\x12\x10\n\x03val\x18\x02\x20\x01(\x02R\x03val\"/\n\x08MulScore\x12#\n\
    \x05score\x18\x01\x20\x01(\x0b2\r.galaxy.ScoreR\x05score\"b\n\rGalaxyReq\
    uest\x12\x10\n\x03sid\x18\x01\x20\x01(\tR\x03sid\x12\x18\n\x07version\
    \x18\x02\x20\x01(\x05R\x07version\x12%\n\x04feas\x18\x03\x20\x01(\x0b2\
    \x11.galaxy.MulFeaDefR\x04feas\"L\n\x0eGalaxyResponse\x12\x10\n\x03sid\
    \x18\x01\x20\x01(\tR\x03sid\x12(\n\x06scores\x18\x02\x20\x01(\x0b2\x10.g\
    alaxy.MulScoreR\x06scores2?\n\x06Galaxy\x125\n\x04Send\x12\x15.galaxy.Ga\
    laxyRequest\x1a\x16.galaxy.GalaxyResponseB.\n\x16io.grpc.feature.galaxyB\
    \x0cFeatureProtoP\x01\xa2\x02\x03HLWb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
